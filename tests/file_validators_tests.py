import unittest
from app.validators.file_validators import filename_validate


class FileValidatorsTest(unittest.TestCase):

    def test_filename_valid_basic(self):
        cases = [
            ("doc.pdf", "doc.pdf"),
            (".env", ".env"),
            ("—Ñ–∞–π–ª.txt", "—Ñ–∞–π–ª.txt"),
            ("„ÉÜ„Çπ„Éà.png", "„ÉÜ„Çπ„Éà.png"),
            ("imgüòÄ.jpg", "imgüòÄ.jpg"),
            ("spaces inside.txt", "spaces inside.txt"),
        ]
        for raw, expected in cases:
            with self.subTest(raw=raw):
                self.assertEqual(filename_validate(raw), expected)

    def test_filename_valid_with_trimming(self):
        cases = [
            (" leading.txt", "leading.txt"),
            ("trailing.txt ", "trailing.txt"),
            ("\ttrim\t.pdf\t", "trim\t.pdf"),
            ("  mixed name . md  ", "mixed name . md"),
        ]
        for raw, expected in cases:
            with self.subTest(raw=raw):
                self.assertEqual(filename_validate(raw), expected)

    def test_filename_invalid_empty_or_whitespace_only(self):
        for raw in ["", " ", "   ", "\t", "\n"]:
            with self.subTest(raw=raw):
                with self.assertRaises(ValueError):
                    filename_validate(raw)

    def test_filename_invalid_dot_names(self):
        for raw in [".", ".."]:
            with self.subTest(raw=raw):
                with self.assertRaises(ValueError):
                    filename_validate(raw)

    def test_filename_invalid_forbidden_chars(self):
        for raw in ["in/valid.txt", "nul\x00byte", "bad/\x00.txt"]:
            with self.subTest(raw=raw):
                with self.assertRaises(ValueError):
                    filename_validate(raw)

    def test_max_bytes_ascii_boundary(self):
        ok = "a" * 255            # 255 bytes ‚Üí ok
        bad = "a" * 256           # 256 bytes ‚Üí fail
        self.assertEqual(filename_validate(ok), ok)
        with self.assertRaises(ValueError):
            filename_validate(bad)

    def test_filename_max_bytes_multibyte_boundary(self):
        # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞: ~2 –±–∞–π—Ç–∞/—Å–∏–º–≤–æ–ª
        ok = "—è" * 127            # ~254 bytes ‚Üí ok
        bad = "—è" * 128           # ~256 bytes ‚Üí fail
        self.assertEqual(filename_validate(ok), ok)
        with self.assertRaises(ValueError):
            filename_validate(bad)

    def test_filename_max_bytes_after_trimming(self):
        # –¥–æ —Ç—Ä–∏–º–∞ –¥–ª–∏–Ω–∞ >255, –ø–æ—Å–ª–µ —Ç—Ä–∏–º–∞ ‚â§255 ‚Äî –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        raw = " " + ("a" * 255)
        self.assertEqual(filename_validate(raw), "a" * 255)

        # –ø–æ—Å–ª–µ —Ç—Ä–∏–º–∞ –≤—Å—ë –µ—â—ë >255 ‚Äî –¥–æ–ª–∂–Ω–æ —É–ø–∞—Å—Ç—å
        raw2 = " " + ("a" * 256) + " "
        with self.assertRaises(ValueError):
            filename_validate(raw2)

    def test_filename_trimming_various_whitespace(self):
        # –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—ã, –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, NBSP
        cases = [
            ("  name.txt  ", "name.txt"),
            ("\tname.txt\t", "name.txt"),
            ("\nname.txt\n", "name.txt"),
            ("\r\nname.txt\r\n", "name.txt"),
            ("\u00A0name.txt\u00A0", "name.txt"),  # NBSP
        ]
        for raw, expected in cases:
            with self.subTest(raw=repr(raw)):
                self.assertEqual(filename_validate(raw), expected)

    def test_filename_preserve_internal_whitespace_and_backslash(self):
        # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±—ã/–±—ç–∫—Å–ª–µ—à —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
        cases = [
            ("in  side.txt", "in  side.txt"),
            ("in\tside.txt", "in\tside.txt"),
            ("back\\slash.txt", "back\\slash.txt"),
        ]
        for raw, expected in cases:
            with self.subTest(raw=repr(raw)):
                self.assertEqual(filename_validate(raw), expected)

    def test_filename_non_string_inputs_raise(self):
        for raw in [None, 123, 3.14, b"bytes"]:
            with self.subTest(raw=repr(raw)):
                with self.assertRaises(ValueError):
                    filename_validate(raw)  # type: ignore[arg-type]

    def test_filename_allows_fullwidth_slash_and_newline_inside(self):
        # —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –í–ù–£–¢–†–ò –∏–º–µ–Ω–∏
        cases = [
            ("fullwidthÔºèslash.txt", "fullwidthÔºèslash.txt"),  # U+FF0F, –Ω–µ '/'
            ("line\nbreak.txt", "line\nbreak.txt"),
        ]
        for raw, expected in cases:
            with self.subTest(raw=repr(raw)):
                self.assertEqual(filename_validate(raw), expected)

    def test_filename_trim_to_dot_or_dotdot_is_invalid(self):
        for raw in [" . ", " .. "]:
            with self.subTest(raw=repr(raw)):
                with self.assertRaises(ValueError):
                    filename_validate(raw)

    def test_filename_mixed_multibyte_boundary(self):
        # 127 '—è' (~254 –±–∞–π—Ç–∞) + 'a' (1 –±–∞–π—Ç) = 255 ‚Üí –æ–∫
        ok = "—è" * 127 + "a"
        self.assertEqual(filename_validate(ok), ok)
        # –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –±–∞–π—Ç ‚Üí 256 ‚Üí –æ—à–∏–±–∫–∞
        bad = ok + "a"
        with self.assertRaises(ValueError):
            filename_validate(bad)

    def test_filename_contains_nul_anywhere_invalid(self):
        cases = ["\x00", "a\x00", "\x00b", "pre\x00post.txt"]
        for raw in cases:
            with self.subTest(raw=repr(raw)):
                with self.assertRaises(ValueError):
                    filename_validate(raw)
